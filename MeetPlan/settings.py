"""
Django settings for MeetPlan project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
from configparser import RawConfigParser
from pathlib import Path
from loguru import logger

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent

CONFIG_DIR = BASE_DIR / 'config'
CONFIG = RawConfigParser()
CONFIG.read(CONFIG_DIR / 'config.ini', encoding='utf-8')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = CONFIG.get('DJANGO', 'SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = CONFIG.getboolean('SITE', 'DEBUG')

# 在北大计算中心注册 app 的信息
APPID = CONFIG.get('IAAA', 'APPID')
APPKEY = CONFIG.get('IAAA', 'APPKEY')
APPREDIRECTURL = CONFIG.get('IAAA', 'APPREDIRECTURL')

# 日志文件配置
LOG_DIR = BASE_DIR / 'log'
if not LOG_DIR.exists():
    LOG_DIR.mkdir()

logger.add(LOG_DIR / 'error.log', rotation='1 days', retention='30 days', encoding='utf-8')

ALLOWED_HOSTS = ['*']

VERSIONS = '0.1.0'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django_celery_results',
    'django_celery_beat',

    'apps.account_auth',
    'apps.filemanager',
    'apps.cmsadmin',
    'apps.portal',
    'apps.meet_plan',
    'apps.options',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'MeetPlan.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'apps.options.context_processors.sys_setting',
            ],
            'builtins': ['django.templatetags.static'],
        },
    },
]

WSGI_APPLICATION = 'MeetPlan.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASE_MAP = {
    'sqlite': 'django.db.backends.sqlite3',
    'mysql': 'django.db.backends.mysql',
    'postgresql': 'django.db.backends.postgresql_psycopg2',
    'oracle': 'django.db.backends.oracle',
}

if CONFIG['DATABASE']['engine'] == 'sqlite':
    DATABASES = {
        'default': {
            'ENGINE': DATABASE_MAP[CONFIG['DATABASE']['ENGINE']],
            'NAME': BASE_DIR / 'db.sqlite3',
            'OPTIONS': {
                'timeout': 20,
            }
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': DATABASE_MAP[CONFIG['DATABASE']['ENGINE']],
            'NAME': CONFIG['DATABASE']['NAME'],
            'USER': CONFIG['DATABASE']['USER'],
            'PASSWORD': CONFIG['DATABASE']['PASSWORD'],
            'HOST': CONFIG['DATABASE']['HOST'],
            'PORT': CONFIG['DATABASE']['PORT'],
        }
    }

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/
# Django 认证系统使用的模型类
AUTH_USER_MODEL = 'account_auth.User'

HOST_DOMAIN = CONFIG.get('DJANGO', 'HOST_DOMAIN')
SUBPATH = CONFIG.get('DJANGO', 'SUBPATH')
SITE_URL = '{}{}'.format(HOST_DOMAIN, SUBPATH)
# 配置登录url地址
LOGIN_URL = '{}/account_auth/login/iaaa/'.format(SUBPATH)

STATIC_URL = 'static/'
# 开发阶段放置项目自己的静态文件
STATICFILES_DIRS = [BASE_DIR / 'staticfiles', ]
STATIC_ROOT = BASE_DIR / 'static'

MEDIA_URL = 'media/'
# 项目目录下的media目录 需要在项目目录下创建media目录
MEDIA_ROOT = BASE_DIR / "media"
# 允许上传的图片后缀
ALLOWED_IMG = ["jpg", "jpeg", "gif", "png", "bmp", "webp"]

# 发送邮件
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_SSL = CONFIG.getboolean('EMAIL', 'USE_SSL')
EMAIL_HOST = CONFIG.get('EMAIL', 'HOST')
EMAIL_PORT = CONFIG.getint('EMAIL', 'PORT')
EMAIL_HOST_USER = CONFIG.get('EMAIL', 'USER')
EMAIL_HOST_PASSWORD = CONFIG.get('EMAIL', 'PASSWORD')
EMAIL_FROM = CONFIG.get('EMAIL', 'FROM')

# Django Session 使用 Redis 缓存
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

LANGUAGE_COOKIE_PATH = CSRF_COOKIE_PATH = SESSION_COOKIE_PATH = SUBPATH

# Redis 缓存配置
if CONFIG.get('REDIS', 'PWD'):
    REDIS_ADDRESS = ':{}@{}:{}'.format(CONFIG.get('REDIS', 'PWD'),
                                       CONFIG.get('REDIS', 'HOST'),
                                       CONFIG.get('REDIS', 'PORT'))
else:
    REDIS_ADDRESS = '{}:{}'.format(CONFIG.get('REDIS', 'HOST'),
                                   CONFIG.get('REDIS', 'PORT'))
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://{}/{}".format(REDIS_ADDRESS, CONFIG.get('REDIS', 'NUM')),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}
# Redis Cache 过期设置
REDIS_TIMEOUT = 7 * 24 * 60 * 60
CUBES_REDIS_TIMEOUT = 60 * 60
NEVER_REDIS_TIMEOUT = 365 * 24 * 60 * 60

# Broker配置，使用Redis作为消息中间件
CELERY_BROKER_URL = 'amqp://{}:{}@{}:{}/{}'.format(
    CONFIG.get('RABBIT_MQ', 'USER'),
    CONFIG.get('RABBIT_MQ', 'PASSWORD'),
    CONFIG.get('RABBIT_MQ', 'HOST'),
    CONFIG.get('RABBIT_MQ', 'PORT'),
    CONFIG.get('RABBIT_MQ', 'NAME'),
)

# Celery 配置
CELERY_WORKER_MAX_TASKS_PER_CHILD = 100000  # 每个worker执行10w个任务就会被销毁，可防止内存泄露
CELERY_RESULT_SERIALIZER = 'json'  # 结果序列化方案
CELERY_RESULT_BACKEND = 'django-db'  # BACKEND配置，这里使用redis
CELERY_ENABLE_UTC = False
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

DEFAULT_FILE_STORAGE = 'MeetPlan.tools.storage.FileStorage'

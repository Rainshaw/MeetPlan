// Code generated by Validator v0.1.4. DO NOT EDIT.

package order

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *Order) IsValid() error {
	if p.Id != nil {
		if *p.Id < int64(1) {
			return fmt.Errorf("field Id ge rule failed, current value: %v", *p.Id)
		}
	}
	if p.PlanId != nil {
		if *p.PlanId < int64(1) {
			return fmt.Errorf("field PlanId ge rule failed, current value: %v", *p.PlanId)
		}
	}
	if p.StudentId != nil {
		if *p.StudentId < int64(1) {
			return fmt.Errorf("field StudentId ge rule failed, current value: %v", *p.StudentId)
		}
	}
	if p.Status != nil {
		if p.Status.String() == "<UNSET>" {
			return fmt.Errorf("field Status defined_only rule failed")
		}
	}
	return nil
}
func (p *GetOrderReq) IsValid() error {
	if p.Id < int64(1) {
		return fmt.Errorf("field Id ge rule failed, current value: %v", p.Id)
	}
	return nil
}
func (p *GetOrderResp) IsValid() error {
	if p.Order != nil {
		if err := p.Order.IsValid(); err != nil {
			return fmt.Errorf("filed Order not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("filed BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *MGetOrderReq) IsValid() error {
	if len(p.Ids) < int(1) {
		return fmt.Errorf("field Ids MinLen rule failed, current value: %v", p.Ids)
	}
	return nil
}
func (p *MGetOrderResp) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("filed BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *QueryOrderReq) IsValid() error {
	if p.PageParam != nil {
		if err := p.PageParam.IsValid(); err != nil {
			return fmt.Errorf("filed PageParam not valid, %w", err)
		}
	}
	if len(p.PlanIds) < int(1) {
		return fmt.Errorf("field PlanIds MinLen rule failed, current value: %v", p.PlanIds)
	}
	if len(p.StudentId) < int(1) {
		return fmt.Errorf("field StudentId MinLen rule failed, current value: %v", p.StudentId)
	}
	if p.Status != nil {
		if p.Status.String() == "<UNSET>" {
			return fmt.Errorf("field Status defined_only rule failed")
		}
	}
	return nil
}
func (p *QueryOrderResp) IsValid() error {
	if p.PageResult_ != nil {
		if err := p.PageResult_.IsValid(); err != nil {
			return fmt.Errorf("filed PageResult_ not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("filed BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *CreateOrderReq) IsValid() error {
	if p.PlanId < int64(1) {
		return fmt.Errorf("field PlanId ge rule failed, current value: %v", p.PlanId)
	}
	if p.StudentId < int64(1) {
		return fmt.Errorf("field StudentId ge rule failed, current value: %v", p.StudentId)
	}
	if p.Status != nil {
		if p.Status.String() == "<UNSET>" {
			return fmt.Errorf("field Status defined_only rule failed")
		}
	}
	return nil
}
func (p *CreateOrderResp) IsValid() error {
	if p.Order != nil {
		if err := p.Order.IsValid(); err != nil {
			return fmt.Errorf("filed Order not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("filed BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *MCreateOrderReq) IsValid() error {
	if len(p.Orders) < int(1) {
		return fmt.Errorf("field Orders MinLen rule failed, current value: %v", p.Orders)
	}
	return nil
}
func (p *MCreateOrderResp) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("filed BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdateOrderReq) IsValid() error {
	if p.Id < int64(1) {
		return fmt.Errorf("field Id ge rule failed, current value: %v", p.Id)
	}
	if p.Status != nil {
		if p.Status.String() == "<UNSET>" {
			return fmt.Errorf("field Status defined_only rule failed")
		}
	}
	return nil
}
func (p *UpdateOrderResp) IsValid() error {
	if p.Order != nil {
		if err := p.Order.IsValid(); err != nil {
			return fmt.Errorf("filed Order not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("filed BaseResp not valid, %w", err)
		}
	}
	return nil
}

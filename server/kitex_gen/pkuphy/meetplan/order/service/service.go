// Code generated by Kitex v0.5.1. DO NOT EDIT.

package service

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	order "github.com/pkuphysu/meetplan/kitex_gen/pkuphy/meetplan/order"
)

func serviceInfo() *kitex.ServiceInfo {
	return serviceServiceInfo
}

var serviceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Service"
	handlerType := (*order.Service)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetOrder":     kitex.NewMethodInfo(getOrderHandler, newServiceGetOrderArgs, newServiceGetOrderResult, false),
		"MGetOrder":    kitex.NewMethodInfo(mGetOrderHandler, newServiceMGetOrderArgs, newServiceMGetOrderResult, false),
		"QueryOrder":   kitex.NewMethodInfo(queryOrderHandler, newServiceQueryOrderArgs, newServiceQueryOrderResult, false),
		"CreateOrder":  kitex.NewMethodInfo(createOrderHandler, newServiceCreateOrderArgs, newServiceCreateOrderResult, false),
		"MCreateOrder": kitex.NewMethodInfo(mCreateOrderHandler, newServiceMCreateOrderArgs, newServiceMCreateOrderResult, false),
		"UpdateOrder":  kitex.NewMethodInfo(updateOrderHandler, newServiceUpdateOrderArgs, newServiceUpdateOrderResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "order",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.1",
		Extra:           extra,
	}
	return svcInfo
}

func getOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.ServiceGetOrderArgs)
	realResult := result.(*order.ServiceGetOrderResult)
	success, err := handler.(order.Service).GetOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceGetOrderArgs() interface{} {
	return order.NewServiceGetOrderArgs()
}

func newServiceGetOrderResult() interface{} {
	return order.NewServiceGetOrderResult()
}

func mGetOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.ServiceMGetOrderArgs)
	realResult := result.(*order.ServiceMGetOrderResult)
	success, err := handler.(order.Service).MGetOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceMGetOrderArgs() interface{} {
	return order.NewServiceMGetOrderArgs()
}

func newServiceMGetOrderResult() interface{} {
	return order.NewServiceMGetOrderResult()
}

func queryOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.ServiceQueryOrderArgs)
	realResult := result.(*order.ServiceQueryOrderResult)
	success, err := handler.(order.Service).QueryOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceQueryOrderArgs() interface{} {
	return order.NewServiceQueryOrderArgs()
}

func newServiceQueryOrderResult() interface{} {
	return order.NewServiceQueryOrderResult()
}

func createOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.ServiceCreateOrderArgs)
	realResult := result.(*order.ServiceCreateOrderResult)
	success, err := handler.(order.Service).CreateOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceCreateOrderArgs() interface{} {
	return order.NewServiceCreateOrderArgs()
}

func newServiceCreateOrderResult() interface{} {
	return order.NewServiceCreateOrderResult()
}

func mCreateOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.ServiceMCreateOrderArgs)
	realResult := result.(*order.ServiceMCreateOrderResult)
	success, err := handler.(order.Service).MCreateOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceMCreateOrderArgs() interface{} {
	return order.NewServiceMCreateOrderArgs()
}

func newServiceMCreateOrderResult() interface{} {
	return order.NewServiceMCreateOrderResult()
}

func updateOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.ServiceUpdateOrderArgs)
	realResult := result.(*order.ServiceUpdateOrderResult)
	success, err := handler.(order.Service).UpdateOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceUpdateOrderArgs() interface{} {
	return order.NewServiceUpdateOrderArgs()
}

func newServiceUpdateOrderResult() interface{} {
	return order.NewServiceUpdateOrderResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetOrder(ctx context.Context, req *order.GetOrderReq) (r *order.GetOrderResp, err error) {
	var _args order.ServiceGetOrderArgs
	_args.Req = req
	var _result order.ServiceGetOrderResult
	if err = p.c.Call(ctx, "GetOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetOrder(ctx context.Context, req *order.MGetOrderReq) (r *order.MGetOrderResp, err error) {
	var _args order.ServiceMGetOrderArgs
	_args.Req = req
	var _result order.ServiceMGetOrderResult
	if err = p.c.Call(ctx, "MGetOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryOrder(ctx context.Context, req *order.QueryOrderReq) (r *order.QueryOrderResp, err error) {
	var _args order.ServiceQueryOrderArgs
	_args.Req = req
	var _result order.ServiceQueryOrderResult
	if err = p.c.Call(ctx, "QueryOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateOrder(ctx context.Context, req *order.CreateOrderReq) (r *order.CreateOrderResp, err error) {
	var _args order.ServiceCreateOrderArgs
	_args.Req = req
	var _result order.ServiceCreateOrderResult
	if err = p.c.Call(ctx, "CreateOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MCreateOrder(ctx context.Context, req *order.MCreateOrderReq) (r *order.MCreateOrderResp, err error) {
	var _args order.ServiceMCreateOrderArgs
	_args.Req = req
	var _result order.ServiceMCreateOrderResult
	if err = p.c.Call(ctx, "MCreateOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateOrder(ctx context.Context, req *order.UpdateOrderReq) (r *order.UpdateOrderResp, err error) {
	var _args order.ServiceUpdateOrderArgs
	_args.Req = req
	var _result order.ServiceUpdateOrderResult
	if err = p.c.Call(ctx, "UpdateOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

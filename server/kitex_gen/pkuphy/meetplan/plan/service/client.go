// Code generated by Kitex v0.5.1. DO NOT EDIT.

package service

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	plan "github.com/pkuphysu/meetplan/kitex_gen/pkuphy/meetplan/plan"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreatePlan(ctx context.Context, req *plan.CreatePlanReq, callOptions ...callopt.Option) (r *plan.CreatePlanResp, err error)
	MCreatePlan(ctx context.Context, req *plan.MCreatePlanReq, callOptions ...callopt.Option) (r *plan.MCreatePlanResp, err error)
	GetPlan(ctx context.Context, req *plan.GetPlanReq, callOptions ...callopt.Option) (r *plan.GetPlanResp, err error)
	MGetPlan(ctx context.Context, req *plan.MGetPlanReq, callOptions ...callopt.Option) (r *plan.MGetPlanResp, err error)
	QueryPlan(ctx context.Context, req *plan.QueryPlanReq, callOptions ...callopt.Option) (r *plan.QueryPlanResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kServiceClient struct {
	*kClient
}

func (p *kServiceClient) CreatePlan(ctx context.Context, req *plan.CreatePlanReq, callOptions ...callopt.Option) (r *plan.CreatePlanResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreatePlan(ctx, req)
}

func (p *kServiceClient) MCreatePlan(ctx context.Context, req *plan.MCreatePlanReq, callOptions ...callopt.Option) (r *plan.MCreatePlanResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MCreatePlan(ctx, req)
}

func (p *kServiceClient) GetPlan(ctx context.Context, req *plan.GetPlanReq, callOptions ...callopt.Option) (r *plan.GetPlanResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPlan(ctx, req)
}

func (p *kServiceClient) MGetPlan(ctx context.Context, req *plan.MGetPlanReq, callOptions ...callopt.Option) (r *plan.MGetPlanResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MGetPlan(ctx, req)
}

func (p *kServiceClient) QueryPlan(ctx context.Context, req *plan.QueryPlanReq, callOptions ...callopt.Option) (r *plan.QueryPlanResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryPlan(ctx, req)
}

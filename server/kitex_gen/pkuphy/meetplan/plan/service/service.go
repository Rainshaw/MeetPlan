// Code generated by Kitex v0.5.1. DO NOT EDIT.

package service

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	plan "github.com/pkuphysu/meetplan/kitex_gen/pkuphy/meetplan/plan"
)

func serviceInfo() *kitex.ServiceInfo {
	return serviceServiceInfo
}

var serviceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Service"
	handlerType := (*plan.Service)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetPlan":      kitex.NewMethodInfo(getPlanHandler, newServiceGetPlanArgs, newServiceGetPlanResult, false),
		"MGetPlan":     kitex.NewMethodInfo(mGetPlanHandler, newServiceMGetPlanArgs, newServiceMGetPlanResult, false),
		"QueryPlan":    kitex.NewMethodInfo(queryPlanHandler, newServiceQueryPlanArgs, newServiceQueryPlanResult, false),
		"CreatePlan":   kitex.NewMethodInfo(createPlanHandler, newServiceCreatePlanArgs, newServiceCreatePlanResult, false),
		"MCreatePlan":  kitex.NewMethodInfo(mCreatePlanHandler, newServiceMCreatePlanArgs, newServiceMCreatePlanResult, false),
		"GetOrder":     kitex.NewMethodInfo(getOrderHandler, newServiceGetOrderArgs, newServiceGetOrderResult, false),
		"MGetOrder":    kitex.NewMethodInfo(mGetOrderHandler, newServiceMGetOrderArgs, newServiceMGetOrderResult, false),
		"QueryOrder":   kitex.NewMethodInfo(queryOrderHandler, newServiceQueryOrderArgs, newServiceQueryOrderResult, false),
		"CreateOrder":  kitex.NewMethodInfo(createOrderHandler, newServiceCreateOrderArgs, newServiceCreateOrderResult, false),
		"MCreateOrder": kitex.NewMethodInfo(mCreateOrderHandler, newServiceMCreateOrderArgs, newServiceMCreateOrderResult, false),
		"UpdateOrder":  kitex.NewMethodInfo(updateOrderHandler, newServiceUpdateOrderArgs, newServiceUpdateOrderResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "plan",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.1",
		Extra:           extra,
	}
	return svcInfo
}

func getPlanHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*plan.ServiceGetPlanArgs)
	realResult := result.(*plan.ServiceGetPlanResult)
	success, err := handler.(plan.Service).GetPlan(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceGetPlanArgs() interface{} {
	return plan.NewServiceGetPlanArgs()
}

func newServiceGetPlanResult() interface{} {
	return plan.NewServiceGetPlanResult()
}

func mGetPlanHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*plan.ServiceMGetPlanArgs)
	realResult := result.(*plan.ServiceMGetPlanResult)
	success, err := handler.(plan.Service).MGetPlan(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceMGetPlanArgs() interface{} {
	return plan.NewServiceMGetPlanArgs()
}

func newServiceMGetPlanResult() interface{} {
	return plan.NewServiceMGetPlanResult()
}

func queryPlanHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*plan.ServiceQueryPlanArgs)
	realResult := result.(*plan.ServiceQueryPlanResult)
	success, err := handler.(plan.Service).QueryPlan(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceQueryPlanArgs() interface{} {
	return plan.NewServiceQueryPlanArgs()
}

func newServiceQueryPlanResult() interface{} {
	return plan.NewServiceQueryPlanResult()
}

func createPlanHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*plan.ServiceCreatePlanArgs)
	realResult := result.(*plan.ServiceCreatePlanResult)
	success, err := handler.(plan.Service).CreatePlan(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceCreatePlanArgs() interface{} {
	return plan.NewServiceCreatePlanArgs()
}

func newServiceCreatePlanResult() interface{} {
	return plan.NewServiceCreatePlanResult()
}

func mCreatePlanHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*plan.ServiceMCreatePlanArgs)
	realResult := result.(*plan.ServiceMCreatePlanResult)
	success, err := handler.(plan.Service).MCreatePlan(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceMCreatePlanArgs() interface{} {
	return plan.NewServiceMCreatePlanArgs()
}

func newServiceMCreatePlanResult() interface{} {
	return plan.NewServiceMCreatePlanResult()
}

func getOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*plan.ServiceGetOrderArgs)
	realResult := result.(*plan.ServiceGetOrderResult)
	success, err := handler.(plan.Service).GetOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceGetOrderArgs() interface{} {
	return plan.NewServiceGetOrderArgs()
}

func newServiceGetOrderResult() interface{} {
	return plan.NewServiceGetOrderResult()
}

func mGetOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*plan.ServiceMGetOrderArgs)
	realResult := result.(*plan.ServiceMGetOrderResult)
	success, err := handler.(plan.Service).MGetOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceMGetOrderArgs() interface{} {
	return plan.NewServiceMGetOrderArgs()
}

func newServiceMGetOrderResult() interface{} {
	return plan.NewServiceMGetOrderResult()
}

func queryOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*plan.ServiceQueryOrderArgs)
	realResult := result.(*plan.ServiceQueryOrderResult)
	success, err := handler.(plan.Service).QueryOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceQueryOrderArgs() interface{} {
	return plan.NewServiceQueryOrderArgs()
}

func newServiceQueryOrderResult() interface{} {
	return plan.NewServiceQueryOrderResult()
}

func createOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*plan.ServiceCreateOrderArgs)
	realResult := result.(*plan.ServiceCreateOrderResult)
	success, err := handler.(plan.Service).CreateOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceCreateOrderArgs() interface{} {
	return plan.NewServiceCreateOrderArgs()
}

func newServiceCreateOrderResult() interface{} {
	return plan.NewServiceCreateOrderResult()
}

func mCreateOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*plan.ServiceMCreateOrderArgs)
	realResult := result.(*plan.ServiceMCreateOrderResult)
	success, err := handler.(plan.Service).MCreateOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceMCreateOrderArgs() interface{} {
	return plan.NewServiceMCreateOrderArgs()
}

func newServiceMCreateOrderResult() interface{} {
	return plan.NewServiceMCreateOrderResult()
}

func updateOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*plan.ServiceUpdateOrderArgs)
	realResult := result.(*plan.ServiceUpdateOrderResult)
	success, err := handler.(plan.Service).UpdateOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceUpdateOrderArgs() interface{} {
	return plan.NewServiceUpdateOrderArgs()
}

func newServiceUpdateOrderResult() interface{} {
	return plan.NewServiceUpdateOrderResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetPlan(ctx context.Context, req *plan.GetPlanReq) (r *plan.GetPlanResp, err error) {
	var _args plan.ServiceGetPlanArgs
	_args.Req = req
	var _result plan.ServiceGetPlanResult
	if err = p.c.Call(ctx, "GetPlan", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetPlan(ctx context.Context, req *plan.MGetPlanReq) (r *plan.MGetPlanResp, err error) {
	var _args plan.ServiceMGetPlanArgs
	_args.Req = req
	var _result plan.ServiceMGetPlanResult
	if err = p.c.Call(ctx, "MGetPlan", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryPlan(ctx context.Context, req *plan.QueryPlanReq) (r *plan.QueryPlanResp, err error) {
	var _args plan.ServiceQueryPlanArgs
	_args.Req = req
	var _result plan.ServiceQueryPlanResult
	if err = p.c.Call(ctx, "QueryPlan", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreatePlan(ctx context.Context, req *plan.CreatePlanReq) (r *plan.CreatePlanResp, err error) {
	var _args plan.ServiceCreatePlanArgs
	_args.Req = req
	var _result plan.ServiceCreatePlanResult
	if err = p.c.Call(ctx, "CreatePlan", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MCreatePlan(ctx context.Context, req *plan.MCreatePlanReq) (r *plan.MCreatePlanResp, err error) {
	var _args plan.ServiceMCreatePlanArgs
	_args.Req = req
	var _result plan.ServiceMCreatePlanResult
	if err = p.c.Call(ctx, "MCreatePlan", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetOrder(ctx context.Context, req *plan.GetOrderReq) (r *plan.GetOrderResp, err error) {
	var _args plan.ServiceGetOrderArgs
	_args.Req = req
	var _result plan.ServiceGetOrderResult
	if err = p.c.Call(ctx, "GetOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetOrder(ctx context.Context, req *plan.MGetOrderReq) (r *plan.MGetOrderResp, err error) {
	var _args plan.ServiceMGetOrderArgs
	_args.Req = req
	var _result plan.ServiceMGetOrderResult
	if err = p.c.Call(ctx, "MGetOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryOrder(ctx context.Context, req *plan.QueryOrderReq) (r *plan.QueryOrderResp, err error) {
	var _args plan.ServiceQueryOrderArgs
	_args.Req = req
	var _result plan.ServiceQueryOrderResult
	if err = p.c.Call(ctx, "QueryOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateOrder(ctx context.Context, req *plan.CreateOrderReq) (r *plan.CreateOrderResp, err error) {
	var _args plan.ServiceCreateOrderArgs
	_args.Req = req
	var _result plan.ServiceCreateOrderResult
	if err = p.c.Call(ctx, "CreateOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MCreateOrder(ctx context.Context, req *plan.MCreateOrderReq) (r *plan.MCreateOrderResp, err error) {
	var _args plan.ServiceMCreateOrderArgs
	_args.Req = req
	var _result plan.ServiceMCreateOrderResult
	if err = p.c.Call(ctx, "MCreateOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateOrder(ctx context.Context, req *plan.UpdateOrderReq) (r *plan.UpdateOrderResp, err error) {
	var _args plan.ServiceUpdateOrderArgs
	_args.Req = req
	var _result plan.ServiceUpdateOrderResult
	if err = p.c.Call(ctx, "UpdateOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

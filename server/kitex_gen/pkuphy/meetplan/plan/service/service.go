// Code generated by Kitex v0.5.1. DO NOT EDIT.

package service

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	plan "github.com/pkuphysu/meetplan/kitex_gen/pkuphy/meetplan/plan"
)

func serviceInfo() *kitex.ServiceInfo {
	return serviceServiceInfo
}

var serviceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Service"
	handlerType := (*plan.Service)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetPlan":     kitex.NewMethodInfo(getPlanHandler, newServiceGetPlanArgs, newServiceGetPlanResult, false),
		"MGetPlan":    kitex.NewMethodInfo(mGetPlanHandler, newServiceMGetPlanArgs, newServiceMGetPlanResult, false),
		"QueryPlan":   kitex.NewMethodInfo(queryPlanHandler, newServiceQueryPlanArgs, newServiceQueryPlanResult, false),
		"CreatePlan":  kitex.NewMethodInfo(createPlanHandler, newServiceCreatePlanArgs, newServiceCreatePlanResult, false),
		"MCreatePlan": kitex.NewMethodInfo(mCreatePlanHandler, newServiceMCreatePlanArgs, newServiceMCreatePlanResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "plan",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.1",
		Extra:           extra,
	}
	return svcInfo
}

func getPlanHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*plan.ServiceGetPlanArgs)
	realResult := result.(*plan.ServiceGetPlanResult)
	success, err := handler.(plan.Service).GetPlan(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceGetPlanArgs() interface{} {
	return plan.NewServiceGetPlanArgs()
}

func newServiceGetPlanResult() interface{} {
	return plan.NewServiceGetPlanResult()
}

func mGetPlanHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*plan.ServiceMGetPlanArgs)
	realResult := result.(*plan.ServiceMGetPlanResult)
	success, err := handler.(plan.Service).MGetPlan(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceMGetPlanArgs() interface{} {
	return plan.NewServiceMGetPlanArgs()
}

func newServiceMGetPlanResult() interface{} {
	return plan.NewServiceMGetPlanResult()
}

func queryPlanHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*plan.ServiceQueryPlanArgs)
	realResult := result.(*plan.ServiceQueryPlanResult)
	success, err := handler.(plan.Service).QueryPlan(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceQueryPlanArgs() interface{} {
	return plan.NewServiceQueryPlanArgs()
}

func newServiceQueryPlanResult() interface{} {
	return plan.NewServiceQueryPlanResult()
}

func createPlanHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*plan.ServiceCreatePlanArgs)
	realResult := result.(*plan.ServiceCreatePlanResult)
	success, err := handler.(plan.Service).CreatePlan(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceCreatePlanArgs() interface{} {
	return plan.NewServiceCreatePlanArgs()
}

func newServiceCreatePlanResult() interface{} {
	return plan.NewServiceCreatePlanResult()
}

func mCreatePlanHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*plan.ServiceMCreatePlanArgs)
	realResult := result.(*plan.ServiceMCreatePlanResult)
	success, err := handler.(plan.Service).MCreatePlan(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceMCreatePlanArgs() interface{} {
	return plan.NewServiceMCreatePlanArgs()
}

func newServiceMCreatePlanResult() interface{} {
	return plan.NewServiceMCreatePlanResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetPlan(ctx context.Context, req *plan.GetPlanReq) (r *plan.GetPlanResp, err error) {
	var _args plan.ServiceGetPlanArgs
	_args.Req = req
	var _result plan.ServiceGetPlanResult
	if err = p.c.Call(ctx, "GetPlan", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetPlan(ctx context.Context, req *plan.MGetPlanReq) (r *plan.MGetPlanResp, err error) {
	var _args plan.ServiceMGetPlanArgs
	_args.Req = req
	var _result plan.ServiceMGetPlanResult
	if err = p.c.Call(ctx, "MGetPlan", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryPlan(ctx context.Context, req *plan.QueryPlanReq) (r *plan.QueryPlanResp, err error) {
	var _args plan.ServiceQueryPlanArgs
	_args.Req = req
	var _result plan.ServiceQueryPlanResult
	if err = p.c.Call(ctx, "QueryPlan", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreatePlan(ctx context.Context, req *plan.CreatePlanReq) (r *plan.CreatePlanResp, err error) {
	var _args plan.ServiceCreatePlanArgs
	_args.Req = req
	var _result plan.ServiceCreatePlanResult
	if err = p.c.Call(ctx, "CreatePlan", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MCreatePlan(ctx context.Context, req *plan.MCreatePlanReq) (r *plan.MCreatePlanResp, err error) {
	var _args plan.ServiceMCreatePlanArgs
	_args.Req = req
	var _result plan.ServiceMCreatePlanResult
	if err = p.c.Call(ctx, "MCreatePlan", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

// Code generated by Kitex v0.5.1. DO NOT EDIT.

package service

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	user "meetplan/kitex_gen/pkuphy/meetplan/user"
)

func serviceInfo() *kitex.ServiceInfo {
	return serviceServiceInfo
}

var serviceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Service"
	handlerType := (*user.Service)(nil)
	methods := map[string]kitex.MethodInfo{
		"Login":      kitex.NewMethodInfo(loginHandler, newServiceLoginArgs, newServiceLoginResult, false),
		"GetUser":    kitex.NewMethodInfo(getUserHandler, newServiceGetUserArgs, newServiceGetUserResult, false),
		"MGetUser":   kitex.NewMethodInfo(mGetUserHandler, newServiceMGetUserArgs, newServiceMGetUserResult, false),
		"QueryUser":  kitex.NewMethodInfo(queryUserHandler, newServiceQueryUserArgs, newServiceQueryUserResult, false),
		"UpdateUser": kitex.NewMethodInfo(updateUserHandler, newServiceUpdateUserArgs, newServiceUpdateUserResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.1",
		Extra:           extra,
	}
	return svcInfo
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.ServiceLoginArgs)
	realResult := result.(*user.ServiceLoginResult)
	success, err := handler.(user.Service).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceLoginArgs() interface{} {
	return user.NewServiceLoginArgs()
}

func newServiceLoginResult() interface{} {
	return user.NewServiceLoginResult()
}

func getUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.ServiceGetUserArgs)
	realResult := result.(*user.ServiceGetUserResult)
	success, err := handler.(user.Service).GetUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceGetUserArgs() interface{} {
	return user.NewServiceGetUserArgs()
}

func newServiceGetUserResult() interface{} {
	return user.NewServiceGetUserResult()
}

func mGetUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.ServiceMGetUserArgs)
	realResult := result.(*user.ServiceMGetUserResult)
	success, err := handler.(user.Service).MGetUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceMGetUserArgs() interface{} {
	return user.NewServiceMGetUserArgs()
}

func newServiceMGetUserResult() interface{} {
	return user.NewServiceMGetUserResult()
}

func queryUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.ServiceQueryUserArgs)
	realResult := result.(*user.ServiceQueryUserResult)
	success, err := handler.(user.Service).QueryUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceQueryUserArgs() interface{} {
	return user.NewServiceQueryUserArgs()
}

func newServiceQueryUserResult() interface{} {
	return user.NewServiceQueryUserResult()
}

func updateUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.ServiceUpdateUserArgs)
	realResult := result.(*user.ServiceUpdateUserResult)
	success, err := handler.(user.Service).UpdateUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServiceUpdateUserArgs() interface{} {
	return user.NewServiceUpdateUserArgs()
}

func newServiceUpdateUserResult() interface{} {
	return user.NewServiceUpdateUserResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Login(ctx context.Context, req *user.LoginReq) (r *user.LoginResp, err error) {
	var _args user.ServiceLoginArgs
	_args.Req = req
	var _result user.ServiceLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUser(ctx context.Context, req *user.GetUserReq) (r *user.GetUserResp, err error) {
	var _args user.ServiceGetUserArgs
	_args.Req = req
	var _result user.ServiceGetUserResult
	if err = p.c.Call(ctx, "GetUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetUser(ctx context.Context, req *user.MGetUserReq) (r *user.MGetUserResp, err error) {
	var _args user.ServiceMGetUserArgs
	_args.Req = req
	var _result user.ServiceMGetUserResult
	if err = p.c.Call(ctx, "MGetUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryUser(ctx context.Context, req *user.QueryUserReq) (r *user.QueryUserResp, err error) {
	var _args user.ServiceQueryUserArgs
	_args.Req = req
	var _result user.ServiceQueryUserResult
	if err = p.c.Call(ctx, "QueryUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateUser(ctx context.Context, req *user.UpdateUserReq) (r *user.UpdateUserResp, err error) {
	var _args user.ServiceUpdateUserArgs
	_args.Req = req
	var _result user.ServiceUpdateUserResult
	if err = p.c.Call(ctx, "UpdateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

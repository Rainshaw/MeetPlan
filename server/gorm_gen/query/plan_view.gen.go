// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"meetplan/gorm_gen/model"
)

func newPlanView(db *gorm.DB, opts ...gen.DOOption) planView {
	_planView := planView{}

	_planView.planViewDo.UseDB(db, opts...)
	_planView.planViewDo.UseModel(&model.PlanView{})

	tableName := _planView.planViewDo.TableName()
	_planView.ALL = field.NewAsterisk(tableName)
	_planView.ID = field.NewInt64(tableName, "id")
	_planView.TeacherID = field.NewInt64(tableName, "teacher_id")
	_planView.StartTime = field.NewTime(tableName, "start_time")
	_planView.Duration = field.NewInt64(tableName, "duration")
	_planView.Place = field.NewString(tableName, "place")
	_planView.Quota = field.NewInt8(tableName, "quota")
	_planView.Message = field.NewString(tableName, "message")
	_planView.IsValid = field.NewBool(tableName, "is_valid")
	_planView.QuotaLeft = field.NewInt8(tableName, "quota_left")

	_planView.fillFieldMap()

	return _planView
}

type planView struct {
	planViewDo

	ALL       field.Asterisk
	ID        field.Int64
	TeacherID field.Int64
	StartTime field.Time
	Duration  field.Int64
	Place     field.String
	Quota     field.Int8
	Message   field.String
	IsValid   field.Bool
	QuotaLeft field.Int8

	fieldMap map[string]field.Expr
}

func (p planView) Table(newTableName string) *planView {
	p.planViewDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p planView) As(alias string) *planView {
	p.planViewDo.DO = *(p.planViewDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *planView) updateTableName(table string) *planView {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.TeacherID = field.NewInt64(table, "teacher_id")
	p.StartTime = field.NewTime(table, "start_time")
	p.Duration = field.NewInt64(table, "duration")
	p.Place = field.NewString(table, "place")
	p.Quota = field.NewInt8(table, "quota")
	p.Message = field.NewString(table, "message")
	p.IsValid = field.NewBool(table, "is_valid")
	p.QuotaLeft = field.NewInt8(table, "quota_left")

	p.fillFieldMap()

	return p
}

func (p *planView) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *planView) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["id"] = p.ID
	p.fieldMap["teacher_id"] = p.TeacherID
	p.fieldMap["start_time"] = p.StartTime
	p.fieldMap["duration"] = p.Duration
	p.fieldMap["place"] = p.Place
	p.fieldMap["quota"] = p.Quota
	p.fieldMap["message"] = p.Message
	p.fieldMap["is_valid"] = p.IsValid
	p.fieldMap["quota_left"] = p.QuotaLeft
}

func (p planView) clone(db *gorm.DB) planView {
	p.planViewDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p planView) replaceDB(db *gorm.DB) planView {
	p.planViewDo.ReplaceDB(db)
	return p
}

type planViewDo struct{ gen.DO }

type IPlanViewDo interface {
	gen.SubQuery
	Debug() IPlanViewDo
	WithContext(ctx context.Context) IPlanViewDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPlanViewDo
	WriteDB() IPlanViewDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPlanViewDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPlanViewDo
	Not(conds ...gen.Condition) IPlanViewDo
	Or(conds ...gen.Condition) IPlanViewDo
	Select(conds ...field.Expr) IPlanViewDo
	Where(conds ...gen.Condition) IPlanViewDo
	Order(conds ...field.Expr) IPlanViewDo
	Distinct(cols ...field.Expr) IPlanViewDo
	Omit(cols ...field.Expr) IPlanViewDo
	Join(table schema.Tabler, on ...field.Expr) IPlanViewDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPlanViewDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPlanViewDo
	Group(cols ...field.Expr) IPlanViewDo
	Having(conds ...gen.Condition) IPlanViewDo
	Limit(limit int) IPlanViewDo
	Offset(offset int) IPlanViewDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPlanViewDo
	Unscoped() IPlanViewDo
	Create(values ...*model.PlanView) error
	CreateInBatches(values []*model.PlanView, batchSize int) error
	Save(values ...*model.PlanView) error
	First() (*model.PlanView, error)
	Take() (*model.PlanView, error)
	Last() (*model.PlanView, error)
	Find() ([]*model.PlanView, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PlanView, err error)
	FindInBatches(result *[]*model.PlanView, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PlanView) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPlanViewDo
	Assign(attrs ...field.AssignExpr) IPlanViewDo
	Joins(fields ...field.RelationField) IPlanViewDo
	Preload(fields ...field.RelationField) IPlanViewDo
	FirstOrInit() (*model.PlanView, error)
	FirstOrCreate() (*model.PlanView, error)
	FindByPage(offset int, limit int) (result []*model.PlanView, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPlanViewDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p planViewDo) Debug() IPlanViewDo {
	return p.withDO(p.DO.Debug())
}

func (p planViewDo) WithContext(ctx context.Context) IPlanViewDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p planViewDo) ReadDB() IPlanViewDo {
	return p.Clauses(dbresolver.Read)
}

func (p planViewDo) WriteDB() IPlanViewDo {
	return p.Clauses(dbresolver.Write)
}

func (p planViewDo) Session(config *gorm.Session) IPlanViewDo {
	return p.withDO(p.DO.Session(config))
}

func (p planViewDo) Clauses(conds ...clause.Expression) IPlanViewDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p planViewDo) Returning(value interface{}, columns ...string) IPlanViewDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p planViewDo) Not(conds ...gen.Condition) IPlanViewDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p planViewDo) Or(conds ...gen.Condition) IPlanViewDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p planViewDo) Select(conds ...field.Expr) IPlanViewDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p planViewDo) Where(conds ...gen.Condition) IPlanViewDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p planViewDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPlanViewDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p planViewDo) Order(conds ...field.Expr) IPlanViewDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p planViewDo) Distinct(cols ...field.Expr) IPlanViewDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p planViewDo) Omit(cols ...field.Expr) IPlanViewDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p planViewDo) Join(table schema.Tabler, on ...field.Expr) IPlanViewDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p planViewDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPlanViewDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p planViewDo) RightJoin(table schema.Tabler, on ...field.Expr) IPlanViewDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p planViewDo) Group(cols ...field.Expr) IPlanViewDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p planViewDo) Having(conds ...gen.Condition) IPlanViewDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p planViewDo) Limit(limit int) IPlanViewDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p planViewDo) Offset(offset int) IPlanViewDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p planViewDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPlanViewDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p planViewDo) Unscoped() IPlanViewDo {
	return p.withDO(p.DO.Unscoped())
}

func (p planViewDo) Create(values ...*model.PlanView) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p planViewDo) CreateInBatches(values []*model.PlanView, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p planViewDo) Save(values ...*model.PlanView) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p planViewDo) First() (*model.PlanView, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlanView), nil
	}
}

func (p planViewDo) Take() (*model.PlanView, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlanView), nil
	}
}

func (p planViewDo) Last() (*model.PlanView, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlanView), nil
	}
}

func (p planViewDo) Find() ([]*model.PlanView, error) {
	result, err := p.DO.Find()
	return result.([]*model.PlanView), err
}

func (p planViewDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PlanView, err error) {
	buf := make([]*model.PlanView, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p planViewDo) FindInBatches(result *[]*model.PlanView, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p planViewDo) Attrs(attrs ...field.AssignExpr) IPlanViewDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p planViewDo) Assign(attrs ...field.AssignExpr) IPlanViewDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p planViewDo) Joins(fields ...field.RelationField) IPlanViewDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p planViewDo) Preload(fields ...field.RelationField) IPlanViewDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p planViewDo) FirstOrInit() (*model.PlanView, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlanView), nil
	}
}

func (p planViewDo) FirstOrCreate() (*model.PlanView, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlanView), nil
	}
}

func (p planViewDo) FindByPage(offset int, limit int) (result []*model.PlanView, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p planViewDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p planViewDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p planViewDo) Delete(models ...*model.PlanView) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *planViewDo) withDO(do gen.Dao) *planViewDo {
	p.DO = *do.(*gen.DO)
	return p
}

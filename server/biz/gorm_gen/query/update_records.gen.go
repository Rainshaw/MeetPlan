// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"meetplan/biz/gorm_gen/model"
)

func newUpdateRecord(db *gorm.DB, opts ...gen.DOOption) updateRecord {
	_updateRecord := updateRecord{}

	_updateRecord.updateRecordDo.UseDB(db, opts...)
	_updateRecord.updateRecordDo.UseModel(&model.UpdateRecord{})

	tableName := _updateRecord.updateRecordDo.TableName()
	_updateRecord.ALL = field.NewAsterisk(tableName)
	_updateRecord.ID = field.NewInt32(tableName, "id")
	_updateRecord.Time = field.NewTime(tableName, "time")
	_updateRecord.Author = field.NewString(tableName, "author")
	_updateRecord.URL = field.NewString(tableName, "url")
	_updateRecord.Info = field.NewString(tableName, "info")

	_updateRecord.fillFieldMap()

	return _updateRecord
}

type updateRecord struct {
	updateRecordDo

	ALL    field.Asterisk
	ID     field.Int32
	Time   field.Time
	Author field.String
	URL    field.String
	Info   field.String

	fieldMap map[string]field.Expr
}

func (u updateRecord) Table(newTableName string) *updateRecord {
	u.updateRecordDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u updateRecord) As(alias string) *updateRecord {
	u.updateRecordDo.DO = *(u.updateRecordDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *updateRecord) updateTableName(table string) *updateRecord {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.Time = field.NewTime(table, "time")
	u.Author = field.NewString(table, "author")
	u.URL = field.NewString(table, "url")
	u.Info = field.NewString(table, "info")

	u.fillFieldMap()

	return u
}

func (u *updateRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *updateRecord) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 5)
	u.fieldMap["id"] = u.ID
	u.fieldMap["time"] = u.Time
	u.fieldMap["author"] = u.Author
	u.fieldMap["url"] = u.URL
	u.fieldMap["info"] = u.Info
}

func (u updateRecord) clone(db *gorm.DB) updateRecord {
	u.updateRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u updateRecord) replaceDB(db *gorm.DB) updateRecord {
	u.updateRecordDo.ReplaceDB(db)
	return u
}

type updateRecordDo struct{ gen.DO }

type IUpdateRecordDo interface {
	gen.SubQuery
	Debug() IUpdateRecordDo
	WithContext(ctx context.Context) IUpdateRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUpdateRecordDo
	WriteDB() IUpdateRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUpdateRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUpdateRecordDo
	Not(conds ...gen.Condition) IUpdateRecordDo
	Or(conds ...gen.Condition) IUpdateRecordDo
	Select(conds ...field.Expr) IUpdateRecordDo
	Where(conds ...gen.Condition) IUpdateRecordDo
	Order(conds ...field.Expr) IUpdateRecordDo
	Distinct(cols ...field.Expr) IUpdateRecordDo
	Omit(cols ...field.Expr) IUpdateRecordDo
	Join(table schema.Tabler, on ...field.Expr) IUpdateRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUpdateRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUpdateRecordDo
	Group(cols ...field.Expr) IUpdateRecordDo
	Having(conds ...gen.Condition) IUpdateRecordDo
	Limit(limit int) IUpdateRecordDo
	Offset(offset int) IUpdateRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUpdateRecordDo
	Unscoped() IUpdateRecordDo
	Create(values ...*model.UpdateRecord) error
	CreateInBatches(values []*model.UpdateRecord, batchSize int) error
	Save(values ...*model.UpdateRecord) error
	First() (*model.UpdateRecord, error)
	Take() (*model.UpdateRecord, error)
	Last() (*model.UpdateRecord, error)
	Find() ([]*model.UpdateRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UpdateRecord, err error)
	FindInBatches(result *[]*model.UpdateRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UpdateRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUpdateRecordDo
	Assign(attrs ...field.AssignExpr) IUpdateRecordDo
	Joins(fields ...field.RelationField) IUpdateRecordDo
	Preload(fields ...field.RelationField) IUpdateRecordDo
	FirstOrInit() (*model.UpdateRecord, error)
	FirstOrCreate() (*model.UpdateRecord, error)
	FindByPage(offset int, limit int) (result []*model.UpdateRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUpdateRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u updateRecordDo) Debug() IUpdateRecordDo {
	return u.withDO(u.DO.Debug())
}

func (u updateRecordDo) WithContext(ctx context.Context) IUpdateRecordDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u updateRecordDo) ReadDB() IUpdateRecordDo {
	return u.Clauses(dbresolver.Read)
}

func (u updateRecordDo) WriteDB() IUpdateRecordDo {
	return u.Clauses(dbresolver.Write)
}

func (u updateRecordDo) Session(config *gorm.Session) IUpdateRecordDo {
	return u.withDO(u.DO.Session(config))
}

func (u updateRecordDo) Clauses(conds ...clause.Expression) IUpdateRecordDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u updateRecordDo) Returning(value interface{}, columns ...string) IUpdateRecordDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u updateRecordDo) Not(conds ...gen.Condition) IUpdateRecordDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u updateRecordDo) Or(conds ...gen.Condition) IUpdateRecordDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u updateRecordDo) Select(conds ...field.Expr) IUpdateRecordDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u updateRecordDo) Where(conds ...gen.Condition) IUpdateRecordDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u updateRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUpdateRecordDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u updateRecordDo) Order(conds ...field.Expr) IUpdateRecordDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u updateRecordDo) Distinct(cols ...field.Expr) IUpdateRecordDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u updateRecordDo) Omit(cols ...field.Expr) IUpdateRecordDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u updateRecordDo) Join(table schema.Tabler, on ...field.Expr) IUpdateRecordDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u updateRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUpdateRecordDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u updateRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IUpdateRecordDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u updateRecordDo) Group(cols ...field.Expr) IUpdateRecordDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u updateRecordDo) Having(conds ...gen.Condition) IUpdateRecordDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u updateRecordDo) Limit(limit int) IUpdateRecordDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u updateRecordDo) Offset(offset int) IUpdateRecordDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u updateRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUpdateRecordDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u updateRecordDo) Unscoped() IUpdateRecordDo {
	return u.withDO(u.DO.Unscoped())
}

func (u updateRecordDo) Create(values ...*model.UpdateRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u updateRecordDo) CreateInBatches(values []*model.UpdateRecord, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u updateRecordDo) Save(values ...*model.UpdateRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u updateRecordDo) First() (*model.UpdateRecord, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpdateRecord), nil
	}
}

func (u updateRecordDo) Take() (*model.UpdateRecord, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpdateRecord), nil
	}
}

func (u updateRecordDo) Last() (*model.UpdateRecord, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpdateRecord), nil
	}
}

func (u updateRecordDo) Find() ([]*model.UpdateRecord, error) {
	result, err := u.DO.Find()
	return result.([]*model.UpdateRecord), err
}

func (u updateRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UpdateRecord, err error) {
	buf := make([]*model.UpdateRecord, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u updateRecordDo) FindInBatches(result *[]*model.UpdateRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u updateRecordDo) Attrs(attrs ...field.AssignExpr) IUpdateRecordDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u updateRecordDo) Assign(attrs ...field.AssignExpr) IUpdateRecordDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u updateRecordDo) Joins(fields ...field.RelationField) IUpdateRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u updateRecordDo) Preload(fields ...field.RelationField) IUpdateRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u updateRecordDo) FirstOrInit() (*model.UpdateRecord, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpdateRecord), nil
	}
}

func (u updateRecordDo) FirstOrCreate() (*model.UpdateRecord, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpdateRecord), nil
	}
}

func (u updateRecordDo) FindByPage(offset int, limit int) (result []*model.UpdateRecord, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u updateRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u updateRecordDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u updateRecordDo) Delete(models ...*model.UpdateRecord) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *updateRecordDo) withDO(do gen.Dao) *updateRecordDo {
	u.DO = *do.(*gen.DO)
	return u
}

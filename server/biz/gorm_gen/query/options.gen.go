// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"meetplan/biz/gorm_gen/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newOption(db *gorm.DB, opts ...gen.DOOption) option {
	_option := option{}

	_option.optionDo.UseDB(db, opts...)
	_option.optionDo.UseModel(&model.Option{})

	tableName := _option.optionDo.TableName()
	_option.ALL = field.NewAsterisk(tableName)
	_option.ID = field.NewInt32(tableName, "id")
	_option.Name = field.NewString(tableName, "name")
	_option.Value = field.NewField(tableName, "value")

	_option.fillFieldMap()

	return _option
}

type option struct {
	optionDo

	ALL   field.Asterisk
	ID    field.Int32
	Name  field.String
	Value field.Field

	fieldMap map[string]field.Expr
}

func (o option) Table(newTableName string) *option {
	o.optionDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o option) As(alias string) *option {
	o.optionDo.DO = *(o.optionDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *option) updateTableName(table string) *option {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt32(table, "id")
	o.Name = field.NewString(table, "name")
	o.Value = field.NewField(table, "value")

	o.fillFieldMap()

	return o
}

func (o *option) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *option) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 3)
	o.fieldMap["id"] = o.ID
	o.fieldMap["name"] = o.Name
	o.fieldMap["value"] = o.Value
}

func (o option) clone(db *gorm.DB) option {
	o.optionDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o option) replaceDB(db *gorm.DB) option {
	o.optionDo.ReplaceDB(db)
	return o
}

type optionDo struct{ gen.DO }

type IOptionDo interface {
	gen.SubQuery
	Debug() IOptionDo
	WithContext(ctx context.Context) IOptionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOptionDo
	WriteDB() IOptionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOptionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOptionDo
	Not(conds ...gen.Condition) IOptionDo
	Or(conds ...gen.Condition) IOptionDo
	Select(conds ...field.Expr) IOptionDo
	Where(conds ...gen.Condition) IOptionDo
	Order(conds ...field.Expr) IOptionDo
	Distinct(cols ...field.Expr) IOptionDo
	Omit(cols ...field.Expr) IOptionDo
	Join(table schema.Tabler, on ...field.Expr) IOptionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOptionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOptionDo
	Group(cols ...field.Expr) IOptionDo
	Having(conds ...gen.Condition) IOptionDo
	Limit(limit int) IOptionDo
	Offset(offset int) IOptionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOptionDo
	Unscoped() IOptionDo
	Create(values ...*model.Option) error
	CreateInBatches(values []*model.Option, batchSize int) error
	Save(values ...*model.Option) error
	First() (*model.Option, error)
	Take() (*model.Option, error)
	Last() (*model.Option, error)
	Find() ([]*model.Option, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Option, err error)
	FindInBatches(result *[]*model.Option, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Option) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOptionDo
	Assign(attrs ...field.AssignExpr) IOptionDo
	Joins(fields ...field.RelationField) IOptionDo
	Preload(fields ...field.RelationField) IOptionDo
	FirstOrInit() (*model.Option, error)
	FirstOrCreate() (*model.Option, error)
	FindByPage(offset int, limit int) (result []*model.Option, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOptionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o optionDo) Debug() IOptionDo {
	return o.withDO(o.DO.Debug())
}

func (o optionDo) WithContext(ctx context.Context) IOptionDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o optionDo) ReadDB() IOptionDo {
	return o.Clauses(dbresolver.Read)
}

func (o optionDo) WriteDB() IOptionDo {
	return o.Clauses(dbresolver.Write)
}

func (o optionDo) Session(config *gorm.Session) IOptionDo {
	return o.withDO(o.DO.Session(config))
}

func (o optionDo) Clauses(conds ...clause.Expression) IOptionDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o optionDo) Returning(value interface{}, columns ...string) IOptionDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o optionDo) Not(conds ...gen.Condition) IOptionDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o optionDo) Or(conds ...gen.Condition) IOptionDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o optionDo) Select(conds ...field.Expr) IOptionDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o optionDo) Where(conds ...gen.Condition) IOptionDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o optionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IOptionDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o optionDo) Order(conds ...field.Expr) IOptionDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o optionDo) Distinct(cols ...field.Expr) IOptionDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o optionDo) Omit(cols ...field.Expr) IOptionDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o optionDo) Join(table schema.Tabler, on ...field.Expr) IOptionDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o optionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOptionDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o optionDo) RightJoin(table schema.Tabler, on ...field.Expr) IOptionDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o optionDo) Group(cols ...field.Expr) IOptionDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o optionDo) Having(conds ...gen.Condition) IOptionDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o optionDo) Limit(limit int) IOptionDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o optionDo) Offset(offset int) IOptionDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o optionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOptionDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o optionDo) Unscoped() IOptionDo {
	return o.withDO(o.DO.Unscoped())
}

func (o optionDo) Create(values ...*model.Option) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o optionDo) CreateInBatches(values []*model.Option, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o optionDo) Save(values ...*model.Option) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o optionDo) First() (*model.Option, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Option), nil
	}
}

func (o optionDo) Take() (*model.Option, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Option), nil
	}
}

func (o optionDo) Last() (*model.Option, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Option), nil
	}
}

func (o optionDo) Find() ([]*model.Option, error) {
	result, err := o.DO.Find()
	return result.([]*model.Option), err
}

func (o optionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Option, err error) {
	buf := make([]*model.Option, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o optionDo) FindInBatches(result *[]*model.Option, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o optionDo) Attrs(attrs ...field.AssignExpr) IOptionDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o optionDo) Assign(attrs ...field.AssignExpr) IOptionDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o optionDo) Joins(fields ...field.RelationField) IOptionDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o optionDo) Preload(fields ...field.RelationField) IOptionDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o optionDo) FirstOrInit() (*model.Option, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Option), nil
	}
}

func (o optionDo) FirstOrCreate() (*model.Option, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Option), nil
	}
}

func (o optionDo) FindByPage(offset int, limit int) (result []*model.Option, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o optionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o optionDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o optionDo) Delete(models ...*model.Option) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *optionDo) withDO(do gen.Dao) *optionDo {
	o.DO = *do.(*gen.DO)
	return o
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q            = new(Query)
	FriendLink   *friendLink
	Option       *option
	Order        *order
	Plan         *plan
	PlanView     *planView
	UpdateRecord *updateRecord
	User         *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	FriendLink = &Q.FriendLink
	Option = &Q.Option
	Order = &Q.Order
	Plan = &Q.Plan
	PlanView = &Q.PlanView
	UpdateRecord = &Q.UpdateRecord
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		FriendLink:   newFriendLink(db, opts...),
		Option:       newOption(db, opts...),
		Order:        newOrder(db, opts...),
		Plan:         newPlan(db, opts...),
		PlanView:     newPlanView(db, opts...),
		UpdateRecord: newUpdateRecord(db, opts...),
		User:         newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	FriendLink   friendLink
	Option       option
	Order        order
	Plan         plan
	PlanView     planView
	UpdateRecord updateRecord
	User         user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		FriendLink:   q.FriendLink.clone(db),
		Option:       q.Option.clone(db),
		Order:        q.Order.clone(db),
		Plan:         q.Plan.clone(db),
		PlanView:     q.PlanView.clone(db),
		UpdateRecord: q.UpdateRecord.clone(db),
		User:         q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		FriendLink:   q.FriendLink.replaceDB(db),
		Option:       q.Option.replaceDB(db),
		Order:        q.Order.replaceDB(db),
		Plan:         q.Plan.replaceDB(db),
		PlanView:     q.PlanView.replaceDB(db),
		UpdateRecord: q.UpdateRecord.replaceDB(db),
		User:         q.User.replaceDB(db),
	}
}

type queryCtx struct {
	FriendLink   IFriendLinkDo
	Option       IOptionDo
	Order        IOrderDo
	Plan         IPlanDo
	PlanView     IPlanViewDo
	UpdateRecord IUpdateRecordDo
	User         IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		FriendLink:   q.FriendLink.WithContext(ctx),
		Option:       q.Option.WithContext(ctx),
		Order:        q.Order.WithContext(ctx),
		Plan:         q.Plan.WithContext(ctx),
		PlanView:     q.PlanView.WithContext(ctx),
		UpdateRecord: q.UpdateRecord.WithContext(ctx),
		User:         q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
